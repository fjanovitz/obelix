// Generated by gencpp from file drivers/Camera.msg
// DO NOT EDIT!


#ifndef DRIVERS_MESSAGE_CAMERA_H
#define DRIVERS_MESSAGE_CAMERA_H

#include <ros/service_traits.h>


#include <drivers/CameraRequest.h>
#include <drivers/CameraResponse.h>


namespace drivers
{

struct Camera
{

typedef CameraRequest Request;
typedef CameraResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct Camera
} // namespace drivers


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::drivers::Camera > {
  static const char* value()
  {
    return "b13d2865c5af2a64e6e30ab1b56e1dd5";
  }

  static const char* value(const ::drivers::Camera&) { return value(); }
};

template<>
struct DataType< ::drivers::Camera > {
  static const char* value()
  {
    return "drivers/Camera";
  }

  static const char* value(const ::drivers::Camera&) { return value(); }
};


// service_traits::MD5Sum< ::drivers::CameraRequest> should match
// service_traits::MD5Sum< ::drivers::Camera >
template<>
struct MD5Sum< ::drivers::CameraRequest>
{
  static const char* value()
  {
    return MD5Sum< ::drivers::Camera >::value();
  }
  static const char* value(const ::drivers::CameraRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::drivers::CameraRequest> should match
// service_traits::DataType< ::drivers::Camera >
template<>
struct DataType< ::drivers::CameraRequest>
{
  static const char* value()
  {
    return DataType< ::drivers::Camera >::value();
  }
  static const char* value(const ::drivers::CameraRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::drivers::CameraResponse> should match
// service_traits::MD5Sum< ::drivers::Camera >
template<>
struct MD5Sum< ::drivers::CameraResponse>
{
  static const char* value()
  {
    return MD5Sum< ::drivers::Camera >::value();
  }
  static const char* value(const ::drivers::CameraResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::drivers::CameraResponse> should match
// service_traits::DataType< ::drivers::Camera >
template<>
struct DataType< ::drivers::CameraResponse>
{
  static const char* value()
  {
    return DataType< ::drivers::Camera >::value();
  }
  static const char* value(const ::drivers::CameraResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // DRIVERS_MESSAGE_CAMERA_H
